#include <bitset>

// Purpose:	Mark the place as taken, then returns how many conflicts occured.
static int
MarkAndReturnHowManyConflict(std::bitset<6001>* bitset, int number, int step)
{
	int takenCount = 0;
	int j = 0;
	for(int i = number; j < 100; i += step, ++j)
		if(!bitset->at(i))
			bitset->at(i) = true;
		else
			++takenCount;
	return takenCount;
}

int GetTheCountOfDistinctTermsInTheSequenceGeneratedByABForASpecificRange()
{
	const int limit = 100;
	int result = (limit - 1) * (limit - 1);
	const int range[] = {2, 3, 5, 6, 7, 10};
	
	// Start with 1 and 64^100 = 2^6000, so let the size be 6001.
	std::bitset<6001> bitset;
	// Remove duplicates.
	for(int i = 0; i < sizeof(range) / sizeof(range[0]); ++i)
	{
		// Set all bits false
		bitset.reset();
		// Mark and then remove duplicated.
		result -= MarkAndReturnHowManyConflict(&bitset, 1, 1);
		// Say 4, which is equal to 2^2, the sequence generated by 4 is start from
		// 4^2 that is equals to 2^4, so start with 4, mark the bitset with step c / 2.
		int start = 4;
		for(int j = range[i] * range[i]; j <= limit; j *= range[i], start += 2)
			// If j now is 8, which means 2^3, start with 8^2 = 2 ^6, so start = 6,
			// mark the sequence by step 6 / 2 = 3.
			result -= MarkAndReturnHowManyConflict(&bitset, start, start / 2);
	}
	return result;
}
